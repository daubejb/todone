#!/bin/bash
# by Jeff Daube

# Todo -
# 1. Add ability to launch todone from anywhere and have file.txt source from
# ~/ directory
# 2. Add ability to prioritize items; rearange them
# 3. Upon completion: append date time to end of item


# MENU PROMPTS
#------------------------------------------------------------------------------

ADD_MENU="(a) - Add an item"
DELETE_MENU="(d) - Delete an item"
FINISH_MENU="(f) - Finish an item"
PRIORITIZE_MENU="(p) - Prioritize list"
CANCEL="(c) - Cancel and go back"

# GLOBAL VARIABLES
#------------------------------------------------------------------------------

ITEMS=()
FINISHED_ITEMS=()
MSG=
item_to_prioritize=-1
MODE="normal"
PURPLE_BACKGROUND="\e[45m"
RS="\e[0m"

# MENU FUNCTION DEFINITIONS
#------------------------------------------------------------------------------

function read_items_from_file () {
    ITEMS=()
    filename="file.txt"
    readarray -t lines < "$filename"
    for line in "${lines[@]}"; do
        length_of_line=${#line}
        [[ "$line" != "C "* ]] && ITEMS+=("${line}")
        [[ "$line" == "C "* ]] && FINISHED_ITEMS+=("${line:2:$length_of_line}")
    done
}

function bad_choice () { MSG="Invalid Selection ... Please Try Again" ; }

function add_item () {
    echo
    show_todo_list
    echo
    printf "$CANCEL\n"
    echo
    printf "Enter an item to add then press ENTER:\n"
    read item
    if [[ $item -eq "c" ]]; then
        return
    else
        ITEMS+=("${item}")
    fi
}

function delete_item () { 
    show_todo_list
    echo
    printf "$CANCEL\n"
    echo
    printf "Enter an item number to delete then press ENTER:\n"
    read item
    if [[ $item -eq "c" ]]; then
        return
    else
        item_to_delete=$(($item -1))
        ITEMS=("${ITEMS[@]:0:$item_to_delete}" "${ITEMS[@]:$(($item_to_delete + 1))}")
    fi
}

function finish_item () {
    show_todo_list
    show_finished_items
    echo
    printf "Enter a item number to finish then press ENTER:\n"
    read item
    item_to_finish=$((item-1))
    FINISHED_ITEMS+=("${ITEMS[$item_to_finish]}")
    ITEMS=("${ITEMS[@]:0:$item_to_finish}" "${ITEMS[@]:$(($item_to_finish \
    + 1))}")
    show_todo_list
    show_finished_items
}

function print_a_list ()  {
    array=("$@")
    for ((i=0; i < ${#array[@]}; ++i)); do
        position=$(( $i + 1 ))
        if [ $i == $item_to_prioritize ]; then
            printf "\t$PURPLE_BACKGROUND$position. ${array[$i]}$RS\n"
        else
            printf "\t$position. ${array[$i]}\n"
        fi
    done
}

function show_todo_list () {
    clear
    printf "\nTo-Do List:\n\n"
    print_a_list "${ITEMS[@]}"
}

function write_list_to_file () {
    export_string=
    for ((i=0; i < ${#ITEMS[@]}; ++i)); do
        export_string+="${ITEMS[$i]}\n"
    done
    for ((i=0; i < ${#FINISHED_ITEMS[@]}; ++i)); do
        export_string+="C ${FINISHED_ITEMS[$i]}\n"
    done
    printf "${export_string}" > ~/file.txt
    clear
    break
}

function show_finished_items () {
    printf "\nFinished:\n\n"
    print_a_list "${FINISHED_ITEMS[@]}"
    echo
}

function show_main_menu_options () {
    echo "Please select:"
    echo
    printf "\t${ADD_MENU}\n"
    printf "\t${DELETE_MENU}\n"
    printf "\t${FINISH_MENU}\n"
    printf "\t${PRIORITIZE_MENU}\n"
    printf "\t(x) - to exit\n"
    echo
    if [ "${MSG}" ]; then
        printf "${MSG}\n"
        echo
    fi
    printf "Enter a letter then ENTER to perform an action:\n"
    return
}

function move_item_up () {
    if [ $item_to_prioritize -eq 0 ]; then
        return
    else
        item_to_exchange=$(( $item_to_prioritize-1 ))
        swapper=$item_to_prioritize
        swappee=$item_to_exchange
        TEMP_ITEMS=("${ITEMS[@]:0:$swappee}" "${ITEMS[$swapper]}" "${ITEMS[$swappee]}" \
        "${ITEMS[@]:$(($swapper + 1))}")
        ITEMS=("${TEMP_ITEMS[@]}")
        item_to_prioritize=$((item_to_prioritize-1))
    fi
}
    
    
function move_item_down () {
    if [[ $item_to_prioritize -eq ${#ITEMS[@]}-1 ]]; then
        return
    else
        item_to_exchange=$(( $item_to_prioritize+1 ))
        swapper=$item_to_prioritize
        swappee=$item_to_exchange
        TEMP_ITEMS=("${ITEMS[@]:0:$swapper}" "${ITEMS[$swappee]}" "${ITEMS[$swapper]}" \
        "${ITEMS[@]:$(($swappee + 1))}")
        ITEMS=("${TEMP_ITEMS[@]}")
        item_to_prioritize=$((item_to_prioritize+1))
    fi
}

function respond_to_priority_key_press () {
    read -s -n 1 key
    case $key in
        j|J) move_item_down;;
        k|K) move_item_up;;
        b|B) 
            item_to_prioritize=-1
            break;;
        *) bad_choice;;
    esac
    return
}

function select_item_to_prioritize () {
    clear
    echo
    show_todo_list
    echo
    while [[ $item_to_prioritize -gt -1 ]]; 
    do
            clear
            echo
            show_todo_list
            echo
            echo $item_to_prioritize "|" ${#ITEMS[@]}
            echo
            printf "Press (k)- up or (j)- down to prioritize the selection or (b)
            to go back:\n"
            respond_to_priority_key_press
    done
    clear
    echo
    show_todo_list
    echo
    printf "Enter an item # to prioritize OR press (b) to go back then press ENTER:\n"
    return
}


function enter_prioritize_mode () {
    clear
    number_of_list_items=${#ITEMS[@]}
    while true
    do
        show_todo_list
        select_item_to_prioritize
        read answer
        MSG=
        case $answer in
            [1-"$number_of_list_items"] ) 
                item_to_prioritize=$(( $answer-1 ));;
            b|B) break;;
        esac
    done
    return
}
#------------------------------------------------------------------------------
# MAIN LOGIC
#------------------------------------------------------------------------------

read_items_from_file
while true
do
    show_todo_list
    show_finished_items
    show_main_menu_options
    read -s -n 1 answer
    MSG=
    case $answer in
        a|A) add_item;;
        d|D) delete_item;;
        f|F) finish_item;;
        p|P) enter_prioritize_mode;;
        x|X) write_list_to_file;;

        *) bad_choice;;
    esac
done

